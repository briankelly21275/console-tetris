name: Release

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.101
    - name: Install dependencies
      run: dotnet restore 
    - name: Publish
      run: dotnet publish -r win-x64 -c Release --self-contained --no-restore &&
           dotnet publish -r linux-x64 -c Release --self-contained --no-restore &&
           dotnet publish -r osx-x64 -c Release --self-contained --no-restore
    - name: Detect Artifact name
      run: echo ::set-env name=RELEASE_ARTIFACT_NAME::$(date)
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUBTOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Upload Release Asset to github
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUBTOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: Terminal.Tetris/bin/Release/netcoreapp3.1/${{env.RELEASE_ARTIFACT_NAME}}
        asset_name: ${{env.RELEASE_ARTIFACT_NAME}}
        asset_content_type: application/zip
